apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

//version = libraryVersion

// load properties
Properties properties = new Properties()
File localPropertiesFile = project.file("local.properties");
if(localPropertiesFile.exists()){
    properties.load(localPropertiesFile.newDataInputStream())
}
File projectPropertiesFile = project.file("project.properties");
if(projectPropertiesFile.exists()){
    properties.load(projectPropertiesFile.newDataInputStream())
}

// read properties
def projectName = properties.getProperty("project.name")
def projectGroupId = properties.getProperty("project.groupId")
def projectArtifactId = properties.getProperty("project.artifactId")
def projectVersionName = android.defaultConfig.versionName
def projectPackaging = properties.getProperty("project.packaging")
def projectSiteUrl = properties.getProperty("project.siteUrl")
def projectGitUrl = projectSiteUrl + ".git"
def projectDesc = properties.getProperty("project.desc")

def licenseName = properties.getProperty("project.liscenseName")
def licenseUrl = properties.getProperty("project.licenseUrl")


def githubRepository = properties.getProperty("project.githubRepo")

def developerId = properties.getProperty("developer.id")
def developerName = properties.getProperty("developer.name")
def developerEmail = properties.getProperty("developer.email")

def bintrayUser = properties.getProperty("bintray.user")
def bintrayApikey = properties.getProperty("bintray.apikey")

def javadocName = properties.getProperty("javadoc.name")
def bintrayRepo = "maven"
def projectLicenses = ["Apache-2.0"]

group = projectGroupId      // Maven Group ID for the artifact
//------------------------------ install ------------------------------------//

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging projectPackaging
                groupId projectGroupId
                artifactId projectArtifactId

                // Add your description here
                name projectName
                description projectDesc
                version projectVersionName
                url projectSiteUrl

                // Set your license
                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }
                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }
                scm {
                    connection projectGitUrl
                    developerConnection projectGitUrl
                    url projectSiteUrl

                }
            }
        }
    }
}

//--------------------------------------------------------------

if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}
// javadoc configuration
javadoc {
    options{
        encoding "UTF-8"
        charSet 'UTF-8'
        author true
        version projectVersionName
        links "http://docs.oracle.com/javase/7/docs/api"
        title javadocName
    }
}

// ---------------- Bintray -------------------------------------

//Properties properties = new Properties()
//properties.load(project.file('local.properties').newDataInputStream())

bintray {
    user = bintrayUser
    key = bintrayApikey

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = projectName
        desc = projectDesc
        websiteUrl = projectSiteUrl
        issueTrackerUrl = projectSiteUrl + '/issues'
        vcsUrl = projectGitUrl
        licenses = projectLicenses
        githubRepo = githubRepository        //Optional Github repository
        githubReleaseNotesFile = 'README.md' //Optional Github readme file
        publish = false
        publicDownloadNumbers = true
        version {
            desc = projectDesc
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = properties.getProperty("bintray.gpg.password")
                //Optional. The passphrase for GPG signing'
            }
        }
    }
}

